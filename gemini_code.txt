// All components are in this single file as requested.
// In a real Next.js project, you would structure these into separate files and folders.

// We need to use 'use client' for client-side interactivity like state and event handlers.
"use client";

import React, { useState } from 'react';
import { ResponsiveContainer, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar } from 'recharts';
import { Upload, FileText, CheckCircle, AlertTriangle, Lightbulb, BookOpen, BarChart2, Loader2, ArrowRight, Home, FileSearch, Library, User, ChevronRight } from 'lucide-react';

// Mock Data for the results page
const analysisData = {
  stats: [
    { subject: '문법', score: 85, fullMark: 100 },
    { subject: '어휘', score: 92, fullMark: 100 },
    { subject: '맥락', score: 78, fullMark: 100 },
    { subject: '독창성', score: 88, fullMark: 100 },
    { subject: '논리성', score: 82, fullMark: 100 },
  ],
  spellingGrammar: [
    { original: "이러한 현상은 명확한 원인 분석이 선행되야 한다.", corrected: "이러한 현상은 명확한 원인 분석이 선행돼야 한다.", reason: "'되야'는 '되어야'의 줄임말이므로 '돼야'가 올바른 표기입니다." },
    { original: "학생들은 제각기 다른 개성을 가지고 있다.", corrected: "학생들은 제각기 다른 개성을 지니고 있다.", reason: "'가지고 있다'보다 '지니고 있다'가 문어체에 더 적합한 표현입니다." },
  ],
  context: "전반적인 논리의 흐름은 자연스럽지만, 서론에서 제시한 문제가 결론에서 충분히 해소되지 않은 느낌을 줍니다. 본론의 두 번째 문단과 세 번째 문단의 연결성을 강화하기 위해 연결어를 사용하는 것을 추천합니다.",
  expressions: [
    { phrase: "어쩔 수 없다", suggestion: "불가피하다, 피할 수 없다 등의 표현으로 대체하여 논리적인 인상을 줄 수 있습니다." },
    { phrase: "너무 좋은", suggestion: "'매우 뛰어난', '탁월한' 등 구체적이고 객관적인 표현을 사용하는 것이 좋습니다." },
  ],
  synonyms: [
    { word: "생각하다", alternatives: "고려하다, 사료하다, 숙고하다, 고찰하다" },
    { word: "중요하다", alternatives: "핵심적이다, 필수적이다, 관건이다, 요긴하다" },
    { word: "결과", alternatives: "성과, 결실, 귀결, 소산" },
  ],
  summary: {
    score: 87,
    grade: "우수",
    comment: "전반적으로 논리적 구성과 어휘 사용이 뛰어난 글입니다. 몇 가지 문법적 오류와 표현을 다듬는다면 더욱 완성도 높은 글이 될 것입니다."
  }
};

// Main App Component that routes between pages
export default function App() {
  const [currentPage, setCurrentPage] = useState('home');

  const navigateToLoading = () => {
    setCurrentPage('loading');
    setTimeout(() => {
      setCurrentPage('results');
    }, 2000); // Simulate network delay
  };

  const renderPage = () => {
    switch (currentPage) {
      case 'loading':
        return <LoadingScreen />;
      case 'results':
        return <ResultsPage onNavigate={setCurrentPage} />;
      case 'analysis':
        return <AnalysisPage onStartAnalysis={navigateToLoading} onNavigate={setCurrentPage} />;
      case 'home':
      default:
        return <HomePage onNavigate={setCurrentPage} />;
    }
  };

  return <div className="font-sans">{renderPage()}</div>;
}

// --- Page Components ---

// Home Page Component
const HomePage = ({ onNavigate }) => {
  return (
    <div className="min-h-screen bg-gray-50 pb-24">
      <header className="bg-white shadow-sm sticky top-0 z-10">
        <div className="container mx-auto px-6 py-4">
          <h1 className="text-2xl font-bold text-blue-600">AI 논술 첨삭</h1>
        </div>
      </header>

      <main className="container mx-auto px-6 py-8">
        <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-200 mb-8">
            <h2 className="text-2xl font-bold text-gray-800">안녕하세요!</h2>
            <p className="mt-2 text-gray-600">오늘도 완벽한 글쓰기를 위한 여정을 함께해요.</p>
        </div>

        {/* Quick Actions */}
        <div 
          className="bg-blue-600 text-white p-8 rounded-2xl shadow-xl cursor-pointer hover:bg-blue-700 transition-all transform hover:scale-105 mb-8"
          onClick={() => onNavigate('analysis')}
        >
            <div className="flex items-center justify-between">
                <div>
                    <h3 className="text-2xl font-bold">새로운 논술 검사하기</h3>
                    <p className="mt-1 opacity-90">지금 바로 첨삭을 시작해보세요.</p>
                </div>
                <ChevronRight className="w-10 h-10" />
            </div>
        </div>

        {/* Recent Activity */}
        <div className="space-y-4">
            <h3 className="text-xl font-bold text-gray-700">최근 검사 기록</h3>
            <div className="bg-white p-4 rounded-xl shadow border flex justify-between items-center">
                <div>
                    <p className="font-semibold text-gray-800">과학 기술의 발전과 인류의 미래</p>
                    <p className="text-sm text-gray-500">어제, 오후 8:15</p>
                </div>
                <div className="text-right">
                    <p className="font-bold text-blue-600 text-lg">87점</p>
                    <a href="#" onClick={() => onNavigate('results')} className="text-sm text-blue-500 hover:underline">결과 보기</a>
                </div>
            </div>
             <div className="bg-white p-4 rounded-xl shadow border flex justify-between items-center">
                <div>
                    <p className="font-semibold text-gray-800">환경오염 문제의 해결 방안</p>
                    <p className="text-sm text-gray-500">3일 전</p>
                </div>
                <div className="text-right">
                    <p className="font-bold text-yellow-600 text-lg">76점</p>
                    <a href="#" onClick={() => onNavigate('results')} className="text-sm text-blue-500 hover:underline">결과 보기</a>
                </div>
            </div>
        </div>
      </main>

      <BottomNav activePage="home" onNavigate={onNavigate} />
    </div>
  );
};


// Analysis Page (Previously MainPage)
const AnalysisPage = ({ onStartAnalysis, onNavigate }) => {
  const [essayText, setEssayText] = useState("");
  const [fileName, setFileName] = useState("");

  const handleFileChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      setFileName(e.target.files[0].name);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 pb-24">
      <header className="bg-white shadow-sm">
        <div className="container mx-auto px-6 py-4 text-center relative">
          <h1 className="text-xl font-bold text-gray-800">논술 검사</h1>
        </div>
      </header>

      <main className="container mx-auto px-6 py-8">
        <div className="max-w-4xl mx-auto bg-white p-8 rounded-2xl shadow-lg border border-gray-200">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div className="flex flex-col">
              <h3 className="text-xl font-semibold text-gray-700 mb-4 flex items-center">
                <FileText className="w-6 h-6 mr-2 text-blue-500" />
                1. 문제 파일 업로드
              </h3>
              <div className="relative border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-blue-500 transition-colors">
                <Upload className="w-12 h-12 mx-auto text-gray-400" />
                <p className="mt-2 text-sm text-gray-600">
                  {fileName ? fileName : "여기를 클릭하거나 파일을 드래그하세요."}
                </p>
                <input 
                  type="file" 
                  className="absolute inset-0 w-full h-full opacity-0 cursor-pointer" 
                  accept=".pdf"
                  onChange={handleFileChange}
                />
              </div>
              <p className="text-xs text-gray-500 mt-2">PDF 형식의 파일만 업로드 가능합니다.</p>
            </div>

            <div className="flex flex-col">
              <h3 className="text-xl font-semibold text-gray-700 mb-4 flex items-center">
                <BookOpen className="w-6 h-6 mr-2 text-blue-500" />
                2. 답안 텍스트 입력
              </h3>
              <textarea
                className="w-full h-48 p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-shadow"
                placeholder="이곳에 작성하신 논술 답안을 입력해주세요..."
                value={essayText}
                onChange={(e) => setEssayText(e.target.value)}
              ></textarea>
            </div>
          </div>

          <div className="mt-8 text-center">
            <button
              onClick={onStartAnalysis}
              disabled={!essayText.trim()}
              className="w-full md:w-auto bg-blue-600 text-white font-bold py-3 px-12 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-all transform hover:scale-105 shadow-md"
            >
              검사 시작하기
            </button>
          </div>
        </div>
      </main>
      
      <BottomNav activePage="analysis" onNavigate={onNavigate} />
    </div>
  );
};

// Loading Screen Component
const LoadingScreen = () => (
  <div className="flex flex-col items-center justify-center min-h-screen bg-gray-50 text-gray-800">
    <Loader2 className="w-16 h-16 animate-spin text-blue-600" />
    <h1 className="mt-6 text-2xl font-semibold">논술을 분석하고 있어요...</h1>
    <p className="mt-2 text-gray-600">잠시만 기다려주세요. 최고의 첨삭을 제공해 드릴게요.</p>
  </div>
);

// Results Page Component
const ResultsPage = ({ onNavigate }) => (
  <div className="min-h-screen bg-gray-100 p-4 sm:p-6 lg:p-8 pb-24">
    <div className="max-w-7xl mx-auto">
      <header className="mb-8">
        <h1 className="text-4xl font-bold text-gray-800">논술 첨삭 결과</h1>
        <p className="text-lg text-gray-600 mt-2">AI가 분석한 상세 결과를 확인해보세요.</p>
      </header>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <div className="lg:col-span-2 space-y-8">
          <AnalysisCard icon={CheckCircle} title="맞춤법 / 문법">
            <div className="space-y-4">
              {analysisData.spellingGrammar.map((item, index) => (
                <div key={index} className="p-4 bg-gray-50 rounded-lg">
                  <p className="text-gray-500 line-through">{item.original}</p>
                  <div className="flex items-center mt-1">
                    <ArrowRight className="w-4 h-4 text-blue-500 mr-2 flex-shrink-0" />
                    <p className="text-blue-600 font-semibold">{item.corrected}</p>
                  </div>
                  <p className="text-sm text-gray-700 mt-2 pl-6">{item.reason}</p>
                </div>
              ))}
            </div>
          </AnalysisCard>
          <AnalysisCard icon={BookOpen} title="맥락 검사">
            <p className="text-gray-700 leading-relaxed">{analysisData.context}</p>
          </AnalysisCard>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <AnalysisCard icon={AlertTriangle} title="주의할 표현">
              <ul className="space-y-3">
                {analysisData.expressions.map((item, index) => (
                  <li key={index}>
                    <p className="font-semibold text-red-600">{item.phrase}</p>
                    <p className="text-sm text-gray-600 mt-1">{item.suggestion}</p>
                  </li>
                ))}
              </ul>
            </AnalysisCard>
            <AnalysisCard icon={Lightbulb} title="유사어 및 대체어">
              <ul className="space-y-3">
                {analysisData.synonyms.map((item, index) => (
                  <li key={index}>
                    <p className="font-semibold text-green-700">{item.word}</p>
                    <p className="text-sm text-gray-600 mt-1">{item.alternatives}</p>
                  </li>
                ))}
              </ul>
            </AnalysisCard>
          </div>
        </div>
        <div className="space-y-8">
          <div className="bg-white p-6 rounded-2xl shadow-md border border-gray-200">
            <h3 className="text-xl font-bold text-gray-800 mb-4">종합 평가</h3>
            <div className="text-center my-4">
              <div className={`w-32 h-32 rounded-full mx-auto flex items-center justify-center text-white font-extrabold text-5xl ${analysisData.summary.score >= 80 ? 'bg-blue-500' : 'bg-yellow-500'}`}>
                {analysisData.summary.score}
              </div>
              <p className={`mt-3 text-2xl font-bold ${analysisData.summary.score >= 80 ? 'text-blue-600' : 'text-yellow-600'}`}>
                {analysisData.summary.grade}
              </p>
            </div>
            <p className="text-gray-600 text-center leading-relaxed">{analysisData.summary.comment}</p>
          </div>
          <AnalysisCard icon={BarChart2} title="검사 통계 그래프">
            <div className="w-full h-64">
              <ResponsiveContainer>
                <RadarChart cx="50%" cy="50%" outerRadius="80%" data={analysisData.stats}>
                  <PolarGrid />
                  <PolarAngleAxis dataKey="subject" />
                  <PolarRadiusAxis angle={30} domain={[0, 100]} />
                  <Radar name="Score" dataKey="score" stroke="#3B82F6" fill="#60A5FA" fillOpacity={0.6} />
                </RadarChart>
              </ResponsiveContainer>
            </div>
          </AnalysisCard>
        </div>
      </div>
    </div>
    <BottomNav activePage="none" onNavigate={onNavigate} />
  </div>
);


// --- Reusable Components ---

// Bottom Navigation Component
const BottomNav = ({ activePage, onNavigate }) => {
  const navItems = [
    { id: 'home', icon: Home, label: '홈' },
    { id: 'analysis', icon: FileSearch, label: '검사 페이지' },
    { id: 'library', icon: Library, label: '라이브러리' },
    { id: 'mypage', icon: User, label: '마이페이지' },
  ];

  return (
    <footer className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 shadow-t-md">
      <div className="flex justify-around max-w-7xl mx-auto">
        {navItems.map(item => (
          <button
            key={item.id}
            onClick={() => onNavigate(item.id)}
            className={`flex flex-col items-center justify-center w-full pt-2 pb-1 text-sm transition-colors duration-200 ${
              activePage === item.id ? 'text-blue-600' : 'text-gray-500 hover:text-blue-500'
            }`}
          >
            <item.icon className="w-6 h-6 mb-1" />
            <span>{item.label}</span>
          </button>
        ))}
      </div>
    </footer>
  );
};

// Reusable Card Component for the results page
const AnalysisCard = ({ icon: Icon, title, children }) => (
  <div className="bg-white p-6 rounded-2xl shadow-md border border-gray-200">
    <div className="flex items-center mb-4">
      <Icon className="w-7 h-7 text-blue-500" />
      <h2 className="ml-3 text-xl font-bold text-gray-800">{title}</h2>
    </div>
    <div className="text-gray-700">{children}</div>
  </div>
);
